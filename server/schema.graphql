type Query {
  job(id: ID!): Job
  jobs(limit: Int, offset: Int): JobSubList
  company(id: ID!): Company
  user(id: ID!): User!
  userByEmail(email: String!): User
}

"""
Represents a job posting to be filled by a user
"""
type Job {
  id: ID!
  """
  __Date__ when job was posted - ISO format ISO 8601 - YYYY-MM-DD Example: 2019-01-01
  """
  date: String
  title: String!
  description: String
  """
  __Company__ that posted the job - see Company type
  """
  company: Company!
}

type JobSubList {
  items: [Job!]!
  totalCount: Int!
}

"""
Represents a company that has posted a job
"""
type Company {
  id: ID!
  name: String!
  description: String
  jobs: [Job!]!
}

"""
Represents a user of the job board
"""
type User {
  id: ID!
  email: String!
  """
  __Company__ that the user works for - see Company type
  """
  company: Company
}

type Mutation {
  createJob(input: CreateJobInput!): Job
  deleteJob(id: ID!): Job
  updateJob(id: ID!, input: UpdateJobInput): Job
}

input CreateJobInput {
  title: String!
  description: String
}

input UpdateJobInput {
  title: String!
  description: String
}
